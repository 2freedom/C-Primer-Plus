### 第7章 C控制语句：分支和跳转

------

#### 语句

<u>整个if语句仍被视为一条语句（花括号内）</u>  

> `if (score > big)`
> printf("Jackpot!\n");`  //简单语句`

> `if (joe > ron) {`
> `joecash++;`
> printf("You lose, Ron.\n");`
> }`// 复合语句

#### getchar()

函数不带任何参数，从输入队列中返回下一个字符

> `ch = getchar();` 
> `scanf("%c",&ch);`

#### putchar()

函数打印它的参数

> `putchar(ch);` 
> `printf("%c",ch);`

#### getchar（）& putchar（）

不是真正的函数，它们被定义为供预处理器使用的宏。

#### #define

可视为具体的等价

> `#define SPACE ' '` //单引号+空格+单引号

#### C特有编程风格 宽松的格式要求

把两个行为合并成一个表达式，合理使用圆括号组合表达式。  

> `while((ch = getchar()) != '\n')`  

#### “ != ”优先级高于“ = ”

“ ！” 优先级仅次于圆括号 = 递增运算符；关系运算符 > 与 > 或

> `while(ch = getchar() != '\n')` 
> '!='表示关系，故(getchar() != '\n')值不是1就是0 
> while ((c = getchar()) != ' ' && c != '\n')

#### 字符实际上作为整数储存

> putchar(char→int)

#### ctype.h头文件

> 一系列专门处理字符的函数，这些函数接受一个字符作为参数，如果类型符合，就返回一个非零值（真），否则返回0（假）。
> isalpha()  //字母　　　　　　tolower()  //大写返回小写，其他不变  
> isalnum()  //字母数字　　　　toupper()  //小写返回大写，其他不变  
> isblank()  //标准空白字符　　**. . .**

#### if、else匹配规律

else与离它最近的if匹配，除非最近的if被花括号括起来。（忽略缩进）

#### if(90<=range<=100)

<=运算符求值顺序从左往右，故解释为：(90<=range)<=100

#### 序列点：&&、||

> 'while(  (c = getchar()) != ' ' && c != '\n'  )'
>
> //逻辑表达式从左往右求值，发现某元素为无效时，停止求值

#### 空白 定义

空格' '、制表符'\t'、换行符'\n'

#### 三元运算符

> `max = (a>b)?a:b;`

#### switch & if else （switch中无break跳出，将顺序执行）

1. 浮点型变量或表达式、变量在某范围内决定程序流的去向，更适用`if`，虽然使用`switch`通常代码更少、运行更快。

2. switch可以以“字符”判断，即以字符对应的整数

   > `switch(ch) {`
   >
   > ​	case 'a':  ...  ;
   >
   > ​	default： ... ；
   >
   > `}`

3. `case`决定了入口，没有`break`将会继续执行剩余`case`

#### goto 语句包括：goto + 标签名：标签语句（允许描述性单词）

> `goto part2;` + `part2:printf("Hello world!\n");`

可用于<u>跳出嵌套循环</u>（break只能跳出当前循环），过度使用会让程序错综复杂。

#### continue

提高单独分号语句可读性`continue;`，执行后，跳出本次循环剩余内容。

#### break & continue （goto特殊形式，不使用标签）

continue继续下次循环，break跳出当前（层）循环。

#### 条件的判断和赋值

> `if(flag = 10)` `if(flag == 10)`
>
> // 赋值运算符 关系运算符

#### 制表符 \t

可能是四个字符，补齐字符（如果原来就是整数倍，是不是等于没变化？）
